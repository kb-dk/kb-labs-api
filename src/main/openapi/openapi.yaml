openapi: 3.0.2
info:
  version: "${project.version}"
  title: "${project.name}"
  description: |
    ${project.description}
  license:
    name: "${license.name}"
    url: "${license.url}"
servers:
  - url: "/${project.artifactId}/api"
    description: "Current server"
paths:

  /aviser/export/fields:
    get:
      tags:
        - "${project.name}"
      summary: Export data from old newspapers at http://mediestream.dk/
      description: |
                  Retrieve metadata fields from articles in the newspaper collection at http://mediestream.dk/
                  (a part of the [Royal Danish Library](https://kb.dk)). The export is restricted to newspapers older than 140 years
                  and will be sorted by publication date.'
      operationId: exportFields

      parameters:
        - name: query
          in: query
          required: true
          description: |
                      A query for the newspapers to export metadata for.

                      The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis

                      A filter restricting the result to newspapers older than 140 years will be automatically applied
          schema:
            type: string
            example: '"brugt cykel" AND lplace:København AND py:[1850 TO 1899]'
        - name: fields
          in: query
          required: true
          description: |
                      The fields to export.

                      * link: A hyperlink to the Mediestream page for the article
                      * recordID: The unique ID of the article in the Mediestream system
                      * timestamp: The publication date for the article in ISO format YYYY-MM-DDTHH:MM:SS
                      * pwa: Predicted Word Accuracy for the OCR text on a scale from 0 to 100
                      * cer:
                      * fulltext_org: The original OCR text for the article
                      * pageUUID: The ID for the page that the article appears on
                      * editionUUID: The ID for the edition that the page with the article belongs to
                      * editionId: Human readable version of the edition
                      * titleUUID: TODO: Explain this
                      * familyId: TODO: Explain this
                      * newspaper_page: The page number of the addition that the article appears on
                      * newspaper_edition: TODO: Explain this
                      * lplace: TODO: Explain this
                      * location_name: Location names extracted from the text (low quality entity recognition)
                      * location_coordinates: Coordinates for places from location_name
          schema:
            type: array
            items:
              type: string
              enum:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
            default:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
            example:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
        - name: max
          in: query
          required: false
          description: |
                      The maximum number of articles to return, -1 to return all articles.

                      **WARNING** setting this to more than 50 when using the Swagger-UI to test will probably
                      result in the browser locking up
          schema:
            type: integer
            format: int64
            default: -1
            example: 10
        - name: structure
          in: query
          required: false
          # TODO: Figure out how to deliver the comments with JSON
          description: |
                      The major parts of the delivery.

                      * comments: Metadata for the export (query, export time...), prefixed with # in CSV, not shown in JSON
                      * header: The export field names. Only relevant for CSV
                      * content: The export content itself
          schema:
            type: array
            items:
              type: string
              enum:  ['comments', 'header', 'content']
            default: ['header', 'content']
            example: ['header', 'content']
      x-streamingResponse: true
      responses:
        '200':
          description: 'OK'
          content:
            # application/x-jsonlines is another possibility. Potayto, potahto
            application/jsonl:
              schema:
                description: 'Newline separated single-line JSON representations of Documents.\n
                              See https://github.com/ndjson/ndjson-spec or https://jsonlines.org/ for the format'
                $ref: '#/components/schemas/Document'
            application/json:
              schema:
                description: 'JSON-compliant representation of Documents. Note that the structure can be unwieldy for
                              large exports. Consider using application/x-ndjson instead'
                type: array
                items:
                  $ref: '#/components/schemas/Document'
              examples:
                jsonExample:
                  externalValue: 'file://example_aviser_export.json'
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string\\n'
                type: string
        '400':
          description: 'Invalid Argument'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /aviser/hits:
    get:
      tags:
        - "${project.name}"
      summary: 'Perform a search with the given query, returning only the number of hits.
                Typically used to get an estimate for the result size for an export'
      operationId: hitCount

      parameters:
        - name: query
          in: query
          required: true
          description: |
                      A query for the newspaper articles.

                      The query can also be tested at http://www2.statsbiblioteket.dk/mediestream/avis
                      for a more interactive result.
            
                      A filter restricting the result to newspapers older than 140 years will be automatically applied'
          schema:
            type: string
            example: '(cykel OR cikle) AND lplace:København AND py:[1850 TO 1899]'

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string


  /ping:
    get:
      tags:
        - "${project.name}"
      summary: Ping the server to check if the server is reachable.
      operationId: ping

      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Document:
      type: object
      # Note that none of the fields are required
      properties:
        link:
          description: 'A hyperlink to the Mediestream page for the article'
          type: string
        recordID:
          description: 'The unique ID of the article in the Mediestream system'
          type: string
        timestamp:
          description: 'The publication date for the article in ISO format YYYY-MM-DDTHH:MM:SS'
          type: string
        pwa:
          description: 'Predicted Word Accuracy for the OCR text on a scale from 0 to 100, where 100 is perfect'
          type: number
          format: float
        cer:
          description: 'OCR error rate (estimated) on a scale from 0 to 1, where 0 is perfect'
          type: number
          format: float
        fulltext_org:
          description: 'The original OCR text for the article'
          type: string
        pageUUID:
          description: 'The ID for the page that the article appears on'
          type: string
        editionUUID:
          description: 'The ID for the edition that the page with the article belongs to'
          type: string
        editionId:
          description: 'Human readable version of the edition'
          type: string
        titleUUID:
          description: 'TODO: Explain this'
          type: string
        familyId:
          description: 'TODO: Explain this'
          type: string
        newspaper_page:
          description: 'The page number of the addition that the article appears on'
          type: integer
        newspaper_edition:
          description: 'TODO: Explain this'
          type: integer
        lplace:
          description: 'TODO: Explain this'
          type: string
        location_name:
          description: 'Location names extracted from the text (low quality entity recognition)'
          type: string
        location_coordinates:
          description: 'Coordinates for places from location_name'
          type: string
