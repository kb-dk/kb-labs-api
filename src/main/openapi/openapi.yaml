openapi: 3.0.2
info:
  version: "${project.version}"
  title: "${project.name}"
  description: |
    ${project.description}
    
    If you have any ideas or experience any issues please report them at the projects github issues [page](https://github.com/kb-dk/kb-labs-api/issues).
    
    Data from the API is licensed under a [${data.license.name}](${data.license.url}). <br/>
    The software/API itself is licensed under an [${license.name}](${license.url}).

  contact:
    name: "Royal Danish Library"
    url: "https://github.com/kb-dk/kb-labs-api/issues"
  license:
    name: "${license.name}"
    url: "${license.url}"
servers:
  - url: "/${project.artifactId}/api"
    description: "Current server"
paths:

  /aviser/export/fields:
    get:
      tags:
        - "${project.name}"
      summary: Export data from old newspapers at http://mediestream.dk/
      description: |
                  Retrieve metadata fields from articles in the newspaper collection at http://mediestream.dk/
                  (a part of the [Royal Danish Library](https://kb.dk)). The export is restricted to newspapers older than 140 years
                  and will be sorted by publication date.
      operationId: exportFields

      parameters:
        - name: query
          in: query
          required: true
          description: |
                      A query for the newspapers to export metadata for.

                      The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis

                      A filter restricting the result to newspapers older than 140 years will be automatically applied. This means that the API returns material from 1880 and before.
                      
                      Even though a query like '*cykel AND lplace:København*' might return more and newer results in a [Mediestream search](https://www2.statsbiblioteket.dk/mediestream/avis/search/cykel%20AND%20lplace%3AK%C3%B8benhavn)
                      the response from the API is limited to material at least 140 years old.
          schema:
            type: string
            example: 'cykel AND lplace:København AND py:[1850 TO 1880]'
        - name: fields
          in: query
          required: true
          description: |
                      |The fields to export.|Description.|
                      |--- |---|
                      |Link|A hyperlink to the Mediestream page for the article.|
                      |recordID|The unique ID of the article in the Mediestream system.|
                      |timestamp|The publication date for the article in ISO format YYYY-MM-DDTHH:MM:SS|
                      |pwa|Predicted Word Accuracy for the OCR text on a scale from 0 to 100, where 100 is perfect.|
                      |cer|Character Error Rate (estimated) of the OCR on a scale from 0 to 1, where 0 is perfect|
                      |fulltext_org|The original OCR text for the article.|
                      |pageUUID|The ID for the page that the article appears on.|
                      |editionUUID|The ID for the edition that the page with the article belongs to.|
                      |editionId|Human readable version of the edition.|
                      |titleUUID|The ID for the title of the newspaper, which the article is from.|
                      |familyId|The general name of the newspaper. The name of newspapers can change over time, this familyId will always be the same even though the title of the newspaper changes a little.|
                      |newspaper_page|The page number of the edition that the article appears on.|
                      |newspaper_edition|The edition of the newspaper. Newspapers can change during the day, this data tells if the edition has changed.|
                      |lplace|Place of publication. Where the paper was published.|
                      |location_name|Location names extracted from the text (low quality entity recognition).|
                      |location_coordinates |Coordinates for places from location_name.|
          schema:
            type: array
            items:
              type: string
              enum:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
            default:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
            example:  ['link', 'recordID', 'timestamp', 'pwa', 'cer', 'fulltext_org', 'pageUUID', 'editionUUID', 'titleUUID', 'editionId', 'familyId', 'newspaper_page', 'newspaper_edition', 'lplace', 'location_name', 'location_coordinates']
        - name: max
          in: query
          required: false
          description: |
                      The maximum number of articles to return, -1 to return all articles.

                      Setting this to more than 20 ,when using the Swagger-UI, will present a download
                      link instead of directly showing the result.
          schema:
            type: integer
            format: int64
            default: -1
            example: 10
        - name: structure
          in: query
          required: false
          # TODO: Figure out how to deliver the comments with JSON
          description: |
                      |The major parts of the delivery| |
                      |---|---|
                      |comments|Metadata for the export (query, export time...), prefixed with # in CSV, encapsulated in <--!XML comment--> in XML  and not shown in JSON.|
                      |header|The export field names. Only relevant for CSV.|
                      |content|The export content itself.|
          schema:
            type: array
            items:
              type: string
              enum:  ['comments', 'header', 'content']
            default: ['header', 'content']
            example: ['header', 'content']
        - name: format
          in: query
          required: false
          # TODO: Figure out how to deliver the comments with JSON
          description: |
                      |The delivery format.| |
                      |---|---|
                      |CSV|Comma separated, missing values represented with nothing, strings encapsulated in quotes.|
                      |JSON|Valid JSON in the form of a single array of Documents.|
                      |JSONL|Newline separated single-line JSON representations of Documents.|
                      |TXT|Plain text output. UTF-8 Encoded.|
                      |XML|XML output. UTF-8 Encoded. <br/>This output format is [Voyant](https://voyant-tools.org/docs/#!/guide/about) compliant and makes it possible to export newspaper data directly to Voyant.|
          schema:
            type: string
            enum:  ['CSV', 'JSON', 'JSONL', 'TXT', 'XML']
            # TODO: When default value is CSV it would make more sense to have the example value be CSV as well?
            default: 'CSV'
            example: 'JSON'

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            # application/x-jsonlines is another possibility. Potayto, potahto
            application/x-ndjson:
              schema:
                description: 'Newline separated single-line JSON representations of Documents.\n
                              See https://github.com/ndjson/ndjson-spec or https://jsonlines.org/ for the format'
                type: string
            application/json:
              schema:
                description: 'JSON-compliant representation of Documents. Note that the structure can be unwieldy for
                              large exports. Consider using application/x-ndjson instead'
                type: array
                items:
                  $ref: '#/components/schemas/Document'
              examples:
                jsonExample:
                  externalValue: 'file://example_aviser_export.json'
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string\\n'
                type: string
        '400':
          description: 'Invalid Argument'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /aviser/export/images:
    get:
      tags:
        - "${project.name}"
      summary: Export images from newspapers
      description: |
        Export images from pages of newspapers that contains the given query. If images are too tiny, they will not be included in the export.
      operationId: exportImages
      parameters:
        - name: query
          in: query
          required: true
          # TODO: Update description to reflect how the images are extracted from pages where text is found from query
          description: |
            A query for the newspapers to export metadata for.

            The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis

            A filter restricting the result to newspapers older than 140 years will be automatically applied. This means that the API returns material from 1880 and before.

            Even though a query like '*cykel AND lplace:København*' might return more and newer results in a [Mediestream search](https://www2.statsbiblioteket.dk/mediestream/avis/search/cykel%20AND%20lplace%3AK%C3%B8benhavn)
            the response from the API is limited to material at least 140 years old.
          schema:
            type: string
            example: 'politi'
        - name: startTime
          in: query
          required: true
          description: |
            The starting year of the query (inclusive), expressed as YYYY, YYYY-MM or YYYY-MM-DD.
            This cannot be earlier than 1666 as we do not have material from before 1666.
          schema:
            type: integer
            format: int32
            example: 1666
        - name: endTime
          in: query
          required: true
          description: |
            The ending point of the query (inclusive), expressed as YYYY, YYYY-MM or YYYY-MM-DD.
            If blank, the year 1880 is used. The API does not expose data from after 1880.
          schema:
            type: integer
            format: int32
            example: 1880
        - name: max
          in: query
          required: false
          description: |
            Maximum number of images to return
            
            Maximum allowed results per call are 10000.
          schema:
            type: integer
            format: int32
            default: 100
            maximum: 1000

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Parameters are probably out of range.
          content:
            text/plain:
              schema:
                type: string

  /aviser/export/alto:
    get:
      tags:
        - "${project.name}"
      summary: 'Deliver ALTO XML for a single page from http://mediestream.dk/'
      description: |
                  This endpoint delivers [ALTO XML](https://www.loc.gov/standards/alto/) for newspaper material that is 140+ years old.
        
                  [ALTO XML](https://www.loc.gov/standards/alto/) contains OCR text with bounding boxes from sections 
                  down to single word granularity. Where possible, sections are connected through attributes to form
                  articles, which are the atomic documents discovered through [Mediestream](https://mediestream.dk/).
        
                  **Warning:** ALTO XML can be quite large. If the ALTO is requested through the OpenAPI GUI, 
                  the browser might hang for a minute before showing the result.
      operationId: getALTO

      parameters:
        - name: id
          in: query
          required: true
          description: |
                      The ID for the ALTO to retrieve. This can be 
                      * a [Mediestream URL](https://www2.statsbiblioteket.dk/mediestream/avis/record/doms_aviser_page:uuid:a9990f12-e9f0-4b1e-becc-e0d4bf514586/query/heste) to a single page
                      * an `UUID`  such as `a9990f12-e9f0-4b1e-becc-e0d4bf514586`. `UUID`s can be extracted from the Mediestream URL directly or from `recordID`s or `pageUUID`s from field exports.  
                      * a `recordID` for an article such as `doms_newspaperCollection:uuid:1620bf3b-7801-4a34-b2b9-fd8db9611b76-segment_19`. `recordID`s can be retrieved as part of the field export endpoint.
          schema:
            type: string
            example: 'doms_newspaperCollection:uuid:1620bf3b-7801-4a34-b2b9-fd8db9611b76-segment_19'

      responses:
        '200':
          description: 'OK'
          content:
            application/xml:
              schema:
                description: 'ALTO-XML for a newspaper page'
                type: string

  /aviser/query/facet:
    get:
      tags:
        - "${project.name}"
      summary: Facet on a field for newspapers data from http://mediestream.dk/
      description: |
                  Faceting aggregates statistics for a given field based on a query. E.g. faceting on `familyID`
                  delivers a list of all unique general newspaper titles for all the articles matching the query.

                  The data are from articles in the newspaper collection at http://mediestream.dk/
                  (a part of the [Royal Danish Library](https://kb.dk)). The data are restricted to newspapers older
                  than 140 years and will be sorted by publication date.'
      operationId: facet

      parameters:
        - name: query
          in: query
          required: true
          description: |
                      A query for the newspapers to export aggregates facet statistics for.

                      The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis

                      A filter restricting the result to newspapers older than 140 years will be automatically applied
          schema:
            type: string
            example: 'Sletterhage fyr'
        - name: startTime
          in: query
          required: false
          description: |
                      The starting point of the timeline (inclusive), expressed as YYYY, YYYY-MM or YYYY-MM-DD.
                      This cannot be earlier than 1666.
          schema:
            type: string
            default: '1666'
            example: '1666'
        - name: endTime
          in: query
          required: false
          description: |
                      The ending point of the timeline (inclusive), expressed as YYYY, YYYY-MM or YYYY-MM-DD.
                      If blank, the current point in time is used.

                      Note: As of 2021, Mediestream does not contain newspapers later than 2013.
          schema:
            type: string
            default: ''
            example: '2021'
        - name: field
          in: query
          required: false
          description: |
                      |The field to facet.|Note that it is case sensitive.|
                      |---|---|
                      |familyId|The general name of the newspaper. The name of newspapers can change over time, this familyId will always be the same even though the title of the newspaper changes a little.|
                      |lvx|The specific name of the newspaper.|
                      |lplace|Place of publication. Where the paper was published.|
                      |py|Publication year.|
          schema:
            type: string
            enum:  ['familyId', 'lvx', 'lplace', 'py']
            default:  'familyId'
            example:  'familyId'
        - name: sort
          in: query
          required: false
          description: The sort order of the facet content.
          schema:
            type: string
            enum:  ['count', 'index']
            default:  'count'
            example:  'count'
        - name: limit
          in: query
          required: false
          description: The maximum number of entries to return for a facet field.
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
            example: 10
        - name: format
          in: query
          required: false
          # TODO: Figure out how to deliver the comments with JSON
          description: |
                      The delivery format.

                      * CSV: Comma separated, strings encapsulated in quotes
          schema:
            type: string
            enum:  ['CSV']
            default: 'CSV'
            example: 'CSV'

      x-streamingOutput: true # To handle mixed return types
      responses:
        '200':
          description: 'OK'
          content:
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string\\n'
                type: string

  /aviser/stats/timeline:
    get:
      tags:
        - "${project.name}"
      summary: 'Extract statistics for the newspaper corpus at http://mediestream.dk/'
      description: |
                  Extracts a timeline of statistical elements, optionally based on a query.

                  The data are from articles in the newspaper collection at http://mediestream.dk/
                  (a part of the [Royal Danish Library](https://kb.dk)).

                  Note: Depending on query and granularity, the timeline stats can take up to a few minutes to extract.
                  Patience is adviced.
      operationId: aviserStatsTimeline

      parameters:
        - name: query
          in: query
          required: false
          description: |
                      Optional query for the timeline statistics. If no query is given, all data are selected.
                      The output will be a number of timeslices with the given granularity, followed by a summary.

                      The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis
                      for a more interactive result.

                      Note: Queries other than '*:*' will cause the numbers for pages and editions to be approximate.
          schema:
            type: string
            example: '(cykel OR cikle) AND lplace:København'
            default: '*:*'

        - name: filter
          in: query
          required: false
          description: |
                      Optional filter for the timeline statistics. Filter restricts the result set, just as query does,
                      with the differences that filter is always qualified, e.g. `lplace:København` and that filter
                      is also used when calculating the percentage.

                      The match-all filter `*:*` mimicks the behaviour of [Smurf](http://labs.statsbiblioteket.dk/smurf/)
                      while the filter `recordBase:doms_aviser` restricts to newspaper articles, as opposed to both
                      articles (which contains fulltext) and pages (which only contains other metadata).
                      Specifying an empty filter causes `recordBase:doms_aviser` to be used.
          schema:
            type: string
            default: 'recordBase:doms_aviser'
          examples:
            smurf:
              value: '*:*'
              summary: 'All content, including non-text (compatible with Smurf)'
            articles:
              value: 'recordBase:doms_aviser'
              summary: 'Only articles with fulltext (recommended)'

        - name: granularity
          in: query
          description: 'The granularity of the timeline. The finer the granularity, the longer the processing time.'
          schema:
            type: string
            enum: ['decade', 'year', 'month']
            default: 'year'
            example: 'year'

        - name: startTime
          in: query
          required: false
          description: |
                      The starting point of the timeline (inclusive), expressed as YYYY or YYYY-MM.
                      This cannot be earlier than 1666.
          schema:
            type: string
            default: '1666'
            example: '1666'

        - name: endTime
          in: query
          required: false
          description: |
                      The ending point of the timeline (inclusive), expressed as YYYY or YYYY-MM.
                      If blank, the current point in time is used.

                      Note: As of 2021, Mediestream does not contain newspapers later than 2013.
          schema:
            type: string
            default: ''
            example: '2021'

        - name: elements
          in: query
          required: false
          description: |
                    The elements for the timeline. The element 'unique_titles' is special as it, as the name
                    signals, the number of unique titles and not the sum of instances.
          schema:
            type: array
            items:
              type: string
              enum: ['characters', 'words', 'paragraphs', 'articles', 'pages', 'editions', 'unique_titles']
            default: ['articles', 'pages', 'editions']
            example: ['articles', 'pages', 'editions']

        - name: structure
          in: query
          required: false
          # TODO: Figure out how to deliver the comments with JSON
          description: |
                      |The major parts of the delivery.| |
                      |---|---|
                      |comments|Metadata for the timeline (query, export time...), prefixed with # in CSV.|
                      |header|The export field names. Only relevant for CSV as it is implicit in JSON.|
                      |content|The export content itself.|
          schema:
            type: array
            items:
              type: string
              enum:  ['comments', 'header', 'content']
            default: ['header', 'content']
            example: ['header', 'content']

        - name: format
          in: query
          required: false
          description: |
                      |The delivery format.| |
                      |---|---|
                      |CSV|Comma separated, missing values represented with nothing, strings encapsulated in quotes.|
                      |JSON|Valid JSON in the form of a single array of TimelineEntrys.|
          schema:
            type: string
            enum:  ['CSV', 'JSON']
            default: 'CSV'
            example: 'JSON'

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                description: 'JSON-compliant representation of TimelineEntry'
                type: array
                items:
                  $ref: '#/components/schemas/TimelineEntry'
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string\\n'
                type: string


  /aviser/hits:
    get:
      tags:
        - "${project.name}"
      summary: 'Perform a search with the given query, returning only the number of hits,
                divided into publicly available data (> 140 years) and restricted data.
                Typically used to get an estimate for the result size for an export'
      operationId: hitCount

      parameters:
        - name: query
          in: query
          required: true
          description: |
                      A query for the newspaper articles.

                      The query can also be tested at http://www2.statsbiblioteket.dk/mediestream/avis
                      for a more interactive result.
          schema:
            type: string
            example: '(cykel OR cikle) AND lplace:København AND py:[1850 TO 1880]'

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hits'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /ping:
    get:
      tags:
        - "${project.name}"
      summary: Ping the server to check if the server is reachable.
      operationId: ping

      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Hits:
      type: object
      # Note that none of the fields are required
      properties:
        public:
          description: 'Number of hits in the publicly available data (>= 140 years old)'
          type: integer
          format: int64
        restricted:
          description: 'Number of hits in the restricted data (< 140 years old)'
          type: integer
          format: int64

    Document:
      type: object
      # Note that none of the fields are required
      # Examples has been made from this newspaper: https://www2.statsbiblioteket.dk/mediestream/avis/record/doms_aviser_page%3Auuid%3A1620bf3b-7801-4a34-b2b9-fd8db9611b76/query/cykel%20AND%20lplace%3AK%C3%B8benhavn%20AND%20py%3A%5B1850%20TO%201870%5D
      properties:
        link:
          description: 'A hyperlink to the Mediestream page for the article'
          type: string
          example: "http://www2.statsbiblioteket.dk/mediestream/avis/record/doms_aviser_page%3Auuid%3A1620bf3b-7801-4a34-b2b9-fd8db9611b76"
        recordID:
          description: 'The unique ID of the article in the Mediestream system'
          type: string
          example: "doms_newspaperCollection:uuid:1620bf3b-7801-4a34-b2b9-fd8db9611b76-segment_19"
        timestamp:
          description: 'The publication date for the article in ISO format YYYY-MM-DDTHH:MM:SS'
          type: string
          example: "1855-09-17T01:00:00"
        pwa:
          description: 'Predicted Word Accuracy for the OCR text on a scale from 0 to 100, where 100 is perfect'
          type: number
          format: float
          example: 55.7
        cer:
          description: 'OCR error rate (estimated) on a scale from 0 to 1, where 0 is perfect'
          type: number
          format: float
          example: 0.443
        fulltext_org:
          description: 'The original OCR text for the article'
          type: string
          example: "Skonn. \"Dvagmaii\", E. S iostvand, W-sterwk. H. L. Roos Sen- nev 190? Slaugev Jern og Tvalast. Sko. 3 jo. Bvande. Baad Nr. 21, P. Potte>sso», Landscvona. Pedalen & Srpbel 110 Tdv. Rnq. Baad No. 0, H. P. Hansson. Malme. D. Halbovstadt & Co. 160 Tdv. Rug. Ravn 10 Tdv. Tjave. Baad Nv. iO, C. Bengtsson. Holsingbovg. Malling «Sr Lund 114 Tdv. Havne og 15 Tdv. Hvede. C'. FuiS 5 Tdv. Rug. Baad -Maria--, C. I. Borjesson, Wavbevg. C. Hall Tvalast. Baag Nv 23, P. Andeisson. Landscvona. E. A Kolding 12 Slkr tomme Ionstagov. Bvig Haidre--, I. Henderson, St. Davids. Ordre 202 TouS 1 Cent. Stoeiikiil. Jagt \"Tvine Margrethe\", A. Bie. Malme. Jorge« Jensen 153\", Tdv. s. Sild. Baad Nv. 1, N. Swensson, Malme. Pedellen & T cykel 120 Tdv. Rug. Dampstib Hulrnc-, I. A. Horstrom, Stockholm. A. Asoegreen 2! Slkv. Kobberp lader og Bunde. C. A. Ramos, 34 Kister jevnpla- der. Tb. Hvem 20 Kister Jevuvladev. I. S. Aarestrup 707 Ergr. Jern. N. H. Hoffding 480 Stgr. Jern. Skonnertbrig »jnno--, N. E. Hnlibevg , Pitea. P. j. Groot Tvalast. Sko- 1 Fv. Brande. Dakrbaad »Johanna Sophia\", M. Swensson, Gerhebvrg. Skp. Tvalast. Jagt .Anna Catharina , S. Cronbevg, Gesie. ovgen Jensen 3020 Slanger Jern. sti. F. Heffting 777 Stanger Jern. Udklarcrede."
        pageUUID:
          description: 'The ID for the page that the article appears on'
          type: string
          example: "doms_aviser_page:uuid:1620bf3b-7801-4a34-b2b9-fd8db9611b76"
        editionUUID:
          description: 'The ID for the edition that the page with the article belongs to'
          type: string
          example: "doms_aviser_edition:uuid:15e8ea25-a194-4f23-bcae-a938c0292611"
        editionId:
          description: 'Human readable version of the edition'
          type: string
          example: "dagbladetkoebenhavn1851 1855-09-17 001"
        titleUUID:
          description: 'The ID for the title of the newspaper, which the article is from.'
          type: string
          example: "doms_aviser_title:uuid:d55892ba-d236-4e90-bb83-4454b3c3607d"
        familyId:
          description: 'The general name of the newspaper. The name of newspapers can change over time, this familyId will always be the same even though the title of the newspaper changes a little'
          type: string
          example: "dagbladetkoebenhavn1851"
        newspaper_page:
          description: 'The page number of the addition that the article appears on'
          type: integer
          example: 4
        newspaper_edition:
          description: 'The edition of the newspaper. Newspapers can change during the day, this data tells if the edition has changed.'
          type: integer
          example: 1
        lplace:
          description: 'Place of publication. Where the paper was published.'
          type: string
          example: "København"
        location_name:
          description: 'Location names extracted from the text (low quality entity recognition)'
          type: string
          example: "Kolding\nRoos\nAarestrup\nMalling\nLund\nNo\nBrande"
        location_coordinates:
          description: 'Coordinates for places from location_name'
          type: string
          example: "9.48351672776,55.5011822473\n9.48145698254,55.4906590038\n9.01849750893,55.1784894711\n9.74668748111,56.8191193494\n10.1942433332,56.0386370614\n10.1914794517,56.0374956525\n10.1882211989,56.4215787195\n9.56832946,56.5979811936\n9.01733446905,57.1072883932\n10.1909048942,57.4798999721\n11.6533343812,55.2797073299\n8.98410016235,56.5697565282\n9.05108101716,54.9578749722\n8.72753339538,55.7514965432\n10.0047703593,57.3762878597\n9.24078022916,56.6036820747\n9.76685976966,55.8929134847\n12.3014101074,55.2413854707\n10.792793466,56.3541528476\n8.31789315769,56.1120215288\n9.46459476649,56.0983677668\n9.12172723295,55.9431494909"

    Timeline:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/TimelineRequest'
        total:
          $ref: '#/components/schemas/TimelineEntry'
        # TODO: total100plus, total140plus
        entries:
          type: array
          items:
            $ref: '#/components/schemas/TimelineEntry'

    TimelineRequest:
      type: object
      required:
        - requestTime
        - query
        - granularity
        - startTime
        - endTime
        - elements
      properties:
        requestTime:
          description: 'The calendar date + time when the request was issued and the timeline exported. YYYY-MM-DD hh:mm'
          type: string
          example: '2021-03-01 13:45'
        query:
          description: 'Query for the timeline (*:* means all available data)'
          type: string
          example: '(cykel OR cikle) AND lplace:København'
        granularity:
          description: 'The granularity of the timeline'
          type: string
          enum: ['decade', 'year', 'month']
          example: 'year'
        startTime:
          description: 'The starting point of the timeline (inclusive), expressed as YYYY or YYYY-MM'
          type: string
          example: '1666-01'
        endTime:
          description: 'The ending point of the timeline (inclusive), expressed as YYYY or YYYY-MM'
          type: string
          example: '1999-12'
        elements:
          description: |
                The elements for the timeline. The element 'unique_publishers' is special as it, as the name
                signals, the number of unique publishers and not the sum of instances.
          type: array
          items:
            type: string
            enum: ['characters', 'words', 'paragraphs', 'articles', 'pages', 'editions', 'unique_titles']
          example: ['articles', 'pages', 'editions']

    TimelineEntry:
      type: object
      required:
        - timestamp
      properties:
        timestamp:
          description: 'Timestamp for the timeline element, expressed either as YYYY or YYYY-MM, depending on granularity.'
          type: string
          example: '1800-01'
        characters:
          description: 'The total number of characters in the articles in the slice of time'
          type: integer
          format: int64
        words:
          description: 'The total number of words in the articles in the slice of time'
          type: integer
          format: int64
        paragraphs:
          description: 'The total number of paragraphs in the articles in the slice of time'
          type: integer
          format: int64
        articles:
          description: 'The total number of articles in the slice of time'
          type: integer
          format: int64
        pages:
          description: 'The total number of pages in the slice of time'
          type: integer
          format: int64
        editions:
          description: 'The total number of editions in the slice of time'
          type: integer
          format: int64
        unique_titles:
          description: 'The number of unique newspaper titles in the slice of time'
          type: integer
          format: int64
        characters_percentage:
          description: 'The percentage of characters in the matched articles in the slice of time, relative to the full corpus'
          type: number
          format: double
        words_percentage:
          description: 'The percentage of words in the matched articles in the slice of time, relative to the full corpus'
          type: number
          format: double
        paragraphs_percentage:
          description: 'The percentage of paragraphs in the matched articles in the slice of time, relative to the full corpus'
          type: number
          format: double
        articles_percentage:
          description: 'The percentage of matched articles in the slice of time, relative to the full corpus'
          type: number
          format: double
        pages_percentage:
          description: 'The percentage of matched pages in the slice of time, relative to the full corpus'
          type: number
          format: double
        editions_percentage:
          description: 'The percentage of matched editions in the slice of time, relative to the full corpus'
          type: number
          format: double
        unique_titles_percentage:
          description: 'The percentage of matched unique newspaper titles in the slice of time, relative to the full corpus'
          type: number
          format: double
