openapi: 3.0.2
info:
  version: "${project.version}"
  title: "${project.name}"
  description: |
    ${project.description}
  contact:
    email: "${user.name}@kb.dk"
  license:
    name: "${license.name}"
    url: "${license.url}"
servers:
  - url: "/${project.artifactId}/api"
    description: "Current server"
paths:

  /aviser/export/fields:
    get:
      tags:
        - "${project.name}"
      summary: 'Retrieve metadata fields from articles in the newspaper collection at http://mediestream.dk/
                (a part of the Royal Danish Library). The export is restricted to newspapers older than 100 years
                and will be sorted by publication date.'
      operationId: exportFields

      parameters:
        - name: query
          in: query
          required: true
          description: 'A query for the newspapers to export metadata for.\n
                        The query can be tested at http://www2.statsbiblioteket.dk/mediestream/avis\n
                        A filter restricting the result to newspapers older than 100 years will be automatically applied'
          schema:
            type: string
            example: '(cykel OR cikle) AND lplace:København AND py:[1850 TO 1899]'
        - name: fields
          in: query
          required: true
          description: 'The fields to export.\n
                        * link: A hyperlink to the Mediestream page for the article\n
                        * recordID: The unique ID of the article in the Mediestream system\n
                        * pwa: Predicted Word Accuracy for the OCR text on a scale from 0 to 100\n
                        * text: The text content for the article'
          schema:
            type: array
            items:
              type: string
              enum:  ['link', 'recordID', 'pwa', 'text']
            default: ['link', 'recordID', 'pwa', 'text']
            example: ['link', 'recordID', 'pwa', 'text']
        - name: dryrun
          in: query
          required: false
          description: 'Dry run: If true, only the count of the number of matching articles is returned'
          schema:
            type: boolean
            default: false
            example: false
        - name: structure
          in: query
          required: false
          description: 'The major parts of the delivery.\n
                        * comments: Metadata for the export (query, export time...), prefixed with #\n
                        * header: The export field names\n
                        * content: The export content itself'
          schema:
            type: array
            items:
              type: string
              enum:  ['comments', 'header', 'content']
            default: ['comments', 'header', 'content']
            example: ['comments', 'header', 'content']

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            text/csv:
              schema:
                type: string
        '400':
          description: 'Invalid Argument'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /aviser/hits:
    get:
      tags:
        - "${project.name}"
      summary: 'Perform a search with the given query, returning only the number of hits.
                Typically used to get an estimate for the result size for an export'
      operationId: hitCount

      parameters:
        - name: query
          in: query
          required: true
          description: 'A query for the newspaper articles.\n
                        The query can also be tested at http://www2.statsbiblioteket.dk/mediestream/avis
                        for a more interactive result.\n
                        A filter restricting the result to newspapers older than 100 years will be automatically applied'
          schema:
            type: string
            example: '(cykel OR cikle) AND lplace:København AND py:[1850 TO 1899]'

      x-streamingOutput: true
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: integer
                format: int64
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string


  /ping:
    get:
      tags:
        - "${project.name}"
      summary: Ping the server to check if the server is reachable.
      operationId: ping

      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
